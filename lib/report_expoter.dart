import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import 'scan_result.dart';

const List<String> kClassLabels = ['glioma', 'meningioma', 'notumor', 'pituitary'];

class ReportExporter {
  static const String disclaimer =
      "DISCLAIMER: This report is generated by NeuroDetect AI for informational purposes ONLY. "
      "It is NOT a substitute for professional medical diagnosis, advice, or treatment. "
      "AI model predictions may not be accurate. Always consult a qualified healthcare provider.";


  static String _formatTitle(String key) {
    if (key.isEmpty) return '';
    return key
        .replaceAll('_', ' ')
        .split(' ')
        .map((word) => word.isNotEmpty ? '${word[0].toUpperCase()}${word.substring(1)}' : '')
        .join(' ');
  }

  static Future<File?> generatePdf(ScanResult scanResult) async {
    final pdf = pw.Document();
    pw.MemoryImage? imageProvider;

    final imageFile = File(scanResult.imagePath);
    if (await imageFile.exists()) {
      final imageBytes = await imageFile.readAsBytes();
      imageProvider = pw.MemoryImage(imageBytes);
    }

    List<pw.Widget> buildReportWidgets(Map<String, dynamic> details) {
      return details.entries.map((entry) => pw.Padding(
        padding: const pw.EdgeInsets.symmetric(vertical: 3),
        child: pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(_formatTitle(entry.key), style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 11)),
            pw.SizedBox(height: 2),
            pw.Text(
              entry.value is List ? entry.value.join(", ") : entry.value.toString(),
              style: const pw.TextStyle(fontSize: 10),
            ),
          ],
        ),
      )).toList();
    }

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        header: (context) => pw.Container(
            alignment: pw.Alignment.centerLeft,
            margin: const pw.EdgeInsets.only(bottom: 10.0),
            child: pw.Text('NeuroDetect AI - Analysis Report', style: pw.Theme.of(context).header0)
        ),
        footer: (context) => pw.Container(
            alignment: pw.Alignment.centerRight,
            margin: const pw.EdgeInsets.only(top: 10.0),
            child: pw.Text(
                'Page ${context.pageNumber} of ${context.pagesCount} - Informational Use Only',
                style: pw.Theme.of(context).defaultTextStyle.copyWith(color: PdfColors.grey, fontSize: 8))
        ),
        build: (pw.Context context) => [
          pw.Paragraph(text: "Analysis Time: ${DateFormat.yMd().add_jms().format(scanResult.timestamp)}"),
          pw.SizedBox(height: 15),

          if (imageProvider != null)
            pw.Container(
              height: 200,
              alignment: pw.Alignment.center,
              child: pw.Image(imageProvider, fit: pw.BoxFit.contain),
            )
          else
            pw.Container(height: 50, child: pw.Center(child: pw.Text("Image preview not available"))),
          pw.SizedBox(height: 20),

          // Diagnosis
          pw.Header(level: 1, text: "Diagnosis"),
          pw.Text(scanResult.diagnosis == 'notumor' ? 'No Tumor Detected' : scanResult.diagnosis,
              style: pw.TextStyle(fontSize: 14, fontWeight: pw.FontWeight.bold)),
          pw.SizedBox(height: 15),

          // Probabilities
          if (scanResult.probabilities != null && scanResult.probabilities!.isNotEmpty && scanResult.probabilities!.length == kClassLabels.length) ...[
            pw.Header(level: 2, text: "Model Confidence"),
            for (int i = 0; i < scanResult.probabilities!.length; i++)
              pw.Text(
                  "${kClassLabels[i]}: ${(scanResult.probabilities![i] * 100).toStringAsFixed(1)}%",
                  style: const pw.TextStyle(fontSize: 10)
              ),
            pw.SizedBox(height: 15),
          ],

          // Report Details
          if (scanResult.reportDetails.isNotEmpty) ...[
            pw.Header(level: 1, text: "Details"),
            ...buildReportWidgets(scanResult.reportDetails),
            pw.SizedBox(height: 20),
          ],

          // Disclaimer
          pw.Divider(height: 20),
          pw.Paragraph(text: "Important Information", style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
          pw.SizedBox(height: 5),
          pw.Paragraph(text: disclaimer, style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey700)),
        ],
      ),
    );

    try {
      final outputDir = await getTemporaryDirectory();
      final outputFile = File("${outputDir.path}/NeuroDetect_Report_${scanResult.timestamp.millisecondsSinceEpoch}.pdf");
      await outputFile.writeAsBytes(await pdf.save());
      print('PDF saved to: ${outputFile.path}');
      return outputFile;
    } catch (e) {
      print("Error saving PDF: $e");
      return null;
    }
  }

  static Future<void> sharePdf(File pdfFile, BuildContext context) async {
    try {
      final box = context.findRenderObject() as RenderBox?;
      await Share.shareXFiles(
        [XFile(pdfFile.path)],
        text: 'NeuroDetect AI Analysis Report (Informational Only)',
        subject: 'NeuroDetect AI Report',
        sharePositionOrigin: box!.localToGlobal(Offset.zero) & box.size, // For iPad positioning
      );
    } catch (e) {
      print("Error sharing file: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Could not share report: $e')),
      );
    }
  }
}